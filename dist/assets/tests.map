{"version":3,"sources":["mock-kodr/tests/adapters/application.jshint.js","mock-kodr/tests/app.jshint.js","mock-kodr/tests/authenticators/custom.jshint.js","mock-kodr/tests/authenticators/oauth2.jshint.js","mock-kodr/tests/authorizers/oauth2.jshint.js","mock-kodr/tests/components/arena-create.jshint.js","mock-kodr/tests/components/arena-item.jshint.js","mock-kodr/tests/components/arena-list.jshint.js","mock-kodr/tests/components/challenge-create.jshint.js","mock-kodr/tests/components/challenge-edit.jshint.js","mock-kodr/tests/components/challenge-item.jshint.js","mock-kodr/tests/components/challenge-list.jshint.js","mock-kodr/tests/components/concept-create.jshint.js","mock-kodr/tests/components/login-page.jshint.js","mock-kodr/tests/components/user-arena-item.jshint.js","mock-kodr/tests/components/user-arena-list.jshint.js","mock-kodr/tests/controllers/application.jshint.js","mock-kodr/tests/controllers/arena.jshint.js","mock-kodr/tests/controllers/arenas.jshint.js","mock-kodr/tests/controllers/challenge/edit.jshint.js","mock-kodr/tests/controllers/charts.jshint.js","mock-kodr/tests/helpers/destroy-app.js","mock-kodr/tests/helpers/destroy-app.jshint.js","mock-kodr/tests/helpers/ember-basic-dropdown.js","mock-kodr/tests/helpers/ember-power-select.js","mock-kodr/tests/helpers/ember-simple-auth.js","mock-kodr/tests/helpers/module-for-acceptance.js","mock-kodr/tests/helpers/module-for-acceptance.jshint.js","mock-kodr/tests/helpers/resolver.js","mock-kodr/tests/helpers/resolver.jshint.js","mock-kodr/tests/helpers/start-app.js","mock-kodr/tests/helpers/start-app.jshint.js","mock-kodr/tests/integration/components/arena-create-test.js","mock-kodr/tests/integration/components/arena-create-test.jshint.js","mock-kodr/tests/integration/components/arena-item-test.js","mock-kodr/tests/integration/components/arena-item-test.jshint.js","mock-kodr/tests/integration/components/arena-list-test.js","mock-kodr/tests/integration/components/arena-list-test.jshint.js","mock-kodr/tests/integration/components/challenge-create-test.js","mock-kodr/tests/integration/components/challenge-create-test.jshint.js","mock-kodr/tests/integration/components/challenge-edit-test.js","mock-kodr/tests/integration/components/challenge-edit-test.jshint.js","mock-kodr/tests/integration/components/challenge-item-test.js","mock-kodr/tests/integration/components/challenge-item-test.jshint.js","mock-kodr/tests/integration/components/challenge-list-test.js","mock-kodr/tests/integration/components/challenge-list-test.jshint.js","mock-kodr/tests/integration/components/concept-create-test.js","mock-kodr/tests/integration/components/concept-create-test.jshint.js","mock-kodr/tests/integration/components/login-page-test.js","mock-kodr/tests/integration/components/login-page-test.jshint.js","mock-kodr/tests/integration/components/user-arena-item-test.js","mock-kodr/tests/integration/components/user-arena-item-test.jshint.js","mock-kodr/tests/integration/components/user-arena-list-test.js","mock-kodr/tests/integration/components/user-arena-list-test.jshint.js","mock-kodr/tests/models/activity.jshint.js","mock-kodr/tests/models/arena.jshint.js","mock-kodr/tests/models/challenge.jshint.js","mock-kodr/tests/models/concept.jshint.js","mock-kodr/tests/models/mixed.jshint.js","mock-kodr/tests/models/trial.jshint.js","mock-kodr/tests/models/user-arena.jshint.js","mock-kodr/tests/models/user-concept.jshint.js","mock-kodr/tests/models/user.jshint.js","mock-kodr/tests/resolver.jshint.js","mock-kodr/tests/router.jshint.js","mock-kodr/tests/routes/application.jshint.js","mock-kodr/tests/routes/arena.jshint.js","mock-kodr/tests/routes/arenas.jshint.js","mock-kodr/tests/routes/charts.jshint.js","mock-kodr/tests/routes/concepts.jshint.js","mock-kodr/tests/routes/login.jshint.js","mock-kodr/tests/routes/user-arena.jshint.js","mock-kodr/tests/routes/user-arenas.jshint.js","mock-kodr/tests/serializers/application.jshint.js","mock-kodr/tests/sessions/custom.jshint.js","mock-kodr/tests/storages/current-user.jshint.js","mock-kodr/tests/test-helper.js","mock-kodr/tests/test-helper.jshint.js","mock-kodr/tests/unit/adapters/application-test.js","mock-kodr/tests/unit/adapters/application-test.jshint.js","mock-kodr/tests/unit/controllers/application-test.js","mock-kodr/tests/unit/controllers/application-test.jshint.js","mock-kodr/tests/unit/controllers/arena-test.js","mock-kodr/tests/unit/controllers/arena-test.jshint.js","mock-kodr/tests/unit/controllers/arenas-test.js","mock-kodr/tests/unit/controllers/arenas-test.jshint.js","mock-kodr/tests/unit/controllers/charts-test.js","mock-kodr/tests/unit/controllers/charts-test.jshint.js","mock-kodr/tests/unit/models/activity-test.js","mock-kodr/tests/unit/models/activity-test.jshint.js","mock-kodr/tests/unit/models/arena-test.js","mock-kodr/tests/unit/models/arena-test.jshint.js","mock-kodr/tests/unit/models/concept-test.js","mock-kodr/tests/unit/models/concept-test.jshint.js","mock-kodr/tests/unit/models/trial-test.js","mock-kodr/tests/unit/models/trial-test.jshint.js","mock-kodr/tests/unit/models/user-arena-test.js","mock-kodr/tests/unit/models/user-arena-test.jshint.js","mock-kodr/tests/unit/models/user-concept-test.js","mock-kodr/tests/unit/models/user-concept-test.jshint.js","mock-kodr/tests/unit/models/user-test.js","mock-kodr/tests/unit/models/user-test.jshint.js","mock-kodr/tests/unit/routes/application-test.js","mock-kodr/tests/unit/routes/application-test.jshint.js","mock-kodr/tests/unit/routes/arena-test.js","mock-kodr/tests/unit/routes/arena-test.jshint.js","mock-kodr/tests/unit/routes/arenas-test.js","mock-kodr/tests/unit/routes/arenas-test.jshint.js","mock-kodr/tests/unit/routes/charts-test.js","mock-kodr/tests/unit/routes/charts-test.jshint.js","mock-kodr/tests/unit/routes/concepts-test.js","mock-kodr/tests/unit/routes/concepts-test.jshint.js","mock-kodr/tests/unit/routes/login-test.js","mock-kodr/tests/unit/routes/login-test.jshint.js","mock-kodr/tests/unit/routes/user-arena-test.js","mock-kodr/tests/unit/routes/user-arena-test.jshint.js","mock-kodr/tests/unit/routes/user-arenas-test.js","mock-kodr/tests/unit/routes/user-arenas-test.jshint.js","mock-kodr/tests/unit/serializers/application-test.js","mock-kodr/tests/unit/serializers/application-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('mock-kodr/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('mock-kodr/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('mock-kodr/tests/authenticators/custom.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - authenticators/custom.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/custom.js should pass jshint.\\nauthenticators/custom.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/custom.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/custom.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/custom.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/custom.js: line 8, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nauthenticators/custom.js: line 29, col 124, Missing semicolon.\\nauthenticators/custom.js: line 30, col 59, Missing semicolon.\\n\\n7 errors');\n  });\n});","define('mock-kodr/tests/authenticators/oauth2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - authenticators/oauth2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/oauth2.js should pass jshint.\\nauthenticators/oauth2.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/oauth2.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/authorizers/oauth2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - authorizers/oauth2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authorizers/oauth2.js should pass jshint.\\nauthorizers/oauth2.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthorizers/oauth2.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/components/arena-create.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/arena-create.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/arena-create.js should pass jshint.\\ncomponents/arena-create.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/arena-create.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/arena-create.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/arena-create.js: line 32, col 17, Missing semicolon.\\ncomponents/arena-create.js: line 48, col 13, Missing semicolon.\\n\\n5 errors');\n  });\n});","define('mock-kodr/tests/components/arena-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/arena-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/arena-item.js should pass jshint.\\ncomponents/arena-item.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/arena-item.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/components/arena-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/arena-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/arena-list.js should pass jshint.\\ncomponents/arena-list.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/arena-list.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/components/challenge-create.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/challenge-create.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/challenge-create.js should pass jshint.\\ncomponents/challenge-create.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/challenge-create.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/challenge-create.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/challenge-create.js: line 17, col 49, Missing semicolon.\\ncomponents/challenge-create.js: line 22, col 14, Missing semicolon.\\ncomponents/challenge-create.js: line 34, col 9, Missing semicolon.\\n\\n6 errors');\n  });\n});","define('mock-kodr/tests/components/challenge-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/challenge-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/challenge-edit.js should pass jshint.\\ncomponents/challenge-edit.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/challenge-edit.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/challenge-edit.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/components/challenge-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/challenge-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/challenge-item.js should pass jshint.\\ncomponents/challenge-item.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/challenge-item.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/components/challenge-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/challenge-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/challenge-list.js should pass jshint.\\ncomponents/challenge-list.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/challenge-list.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/components/concept-create.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/concept-create.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/concept-create.js should pass jshint.\\ncomponents/concept-create.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/concept-create.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/concept-create.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/concept-create.js: line 16, col 57, Missing semicolon.\\n\\n4 errors');\n  });\n});","define('mock-kodr/tests/components/login-page.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/login-page.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/login-page.js should pass jshint.\\ncomponents/login-page.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/login-page.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/login-page.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/login-page.js: line 8, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/login-page.js: line 11, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/login-page.js: line 13, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/login-page.js: line 13, col 7, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/login-page.js: line 15, col 90, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n8 errors');\n  });\n});","define('mock-kodr/tests/components/user-arena-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/user-arena-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/user-arena-item.js should pass jshint.\\ncomponents/user-arena-item.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/user-arena-item.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/components/user-arena-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/user-arena-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/user-arena-list.js should pass jshint.\\ncomponents/user-arena-list.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/user-arena-list.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 3, col 28, Missing semicolon.\\ncontrollers/application.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 12, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n7 errors');\n  });\n});","define('mock-kodr/tests/controllers/arena.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/arena.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/arena.js should pass jshint.\\ncontrollers/arena.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/arena.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/controllers/arenas.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/arenas.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/arenas.js should pass jshint.\\ncontrollers/arenas.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/arenas.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/controllers/challenge/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/challenge/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/challenge/edit.js should pass jshint.\\ncontrollers/challenge/edit.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/challenge/edit.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/challenge/edit.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/challenge/edit.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/challenge/edit.js: line 65, col 24, Missing semicolon.\\n\\n5 errors');\n  });\n});","define('mock-kodr/tests/controllers/charts.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/charts.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/charts.js should pass jshint.\\ncontrollers/charts.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/charts.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/charts.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/charts.js: line 3, col 28, Missing semicolon.\\ncontrollers/charts.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/charts.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/charts.js: line 135, col 45, Missing semicolon.\\ncontrollers/charts.js: line 136, col 46, Missing semicolon.\\ncontrollers/charts.js: line 137, col 45, Missing semicolon.\\ncontrollers/charts.js: line 154, col 46, Missing semicolon.\\ncontrollers/charts.js: line 155, col 15, Missing semicolon.\\ncontrollers/charts.js: line 206, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/charts.js: line 218, col 26, Missing semicolon.\\ncontrollers/charts.js: line 222, col 26, Missing semicolon.\\ncontrollers/charts.js: line 227, col 34, Missing semicolon.\\n\\n15 errors');\n  });\n});","define('mock-kodr/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('mock-kodr/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/helpers/ember-basic-dropdown', ['exports'], function (exports) {\n  exports.clickTrigger = clickTrigger;\n  exports.tapTrigger = tapTrigger;\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var event = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(event);\n    });\n  }\n\n  function tapTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchStartEvent[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(touchStartEvent);\n    });\n    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchEndEvent[key] = options[key];\n    });\n    Ember.run(function () {\n      return Ember.$(selector)[0].dispatchEvent(touchEndEvent);\n    });\n  }\n});","define('mock-kodr/tests/helpers/ember-power-select', ['exports', 'ember'], function (exports, _ember) {\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n\n  // Helpers for integration tests\n\n  function typeText(selector, text) {\n    var $selector = $(selector);\n    $selector.val(text);\n    var event = document.createEvent(\"Events\");\n    event.initEvent('input', true, true);\n    $selector[0].dispatchEvent(event);\n  }\n\n  function fireNativeMouseEvent(eventType, selectorOrDomElement) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    var target = undefined;\n    if (typeof selectorOrDomElement === 'string') {\n      target = _ember['default'].$(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    _ember['default'].run(function () {\n      return target.dispatchEvent(event);\n    });\n  }\n\n  function nativeMouseDown(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);\n  }\n\n  function nativeMouseUp(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent(\"Events\");\n    oEvent.initEvent('keydown', true, true);\n    $.extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    _ember['default'].run(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(text) {\n    _ember['default'].run(function () {\n      typeText('.ember-power-select-search input, .ember-power-select-trigger-multiple-input', text);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeMouseDown(selector, options);\n  }\n\n  function nativeTouch(selectorOrDomElement) {\n    var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    var target = undefined;\n\n    if (typeof selectorOrDomElement === 'string') {\n      target = _ember['default'].$(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    _ember['default'].run(function () {\n      return target.dispatchEvent(event);\n    });\n    _ember['default'].run(function () {\n      event = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n      target.dispatchEvent(event);\n    });\n  }\n\n  function touchTrigger() {\n    var selector = '.ember-power-select-trigger';\n    nativeTouch(selector);\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    var isEmberOne = _ember['default'].VERSION.match(/1\\.13/);\n\n    _ember['default'].Test.registerAsyncHelper('selectChoose', function (app, cssPath, value) {\n      var id = find(cssPath).find('.ember-power-select-trigger').attr('id').match(/ember-power-select-trigger-ember(\\d+)/)[1];\n      // If the dropdown is closed, open it\n      if (_ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n\n      // Select the option with the given text\n      andThen(function () {\n        var potentialTargets = $('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-option:contains(\"' + value + '\")').toArray();\n        var target = undefined;\n        if (potentialTargets.length > 1) {\n          target = _ember['default'].A(potentialTargets).find(function (t) {\n            return t.textContent.trim() === value;\n          }) || potentialTargets[0];\n        } else {\n          target = potentialTargets[0];\n        }\n        nativeMouseUp(target);\n      });\n    });\n\n    _ember['default'].Test.registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var id = find(cssPath).find('.ember-power-select-trigger').attr('id').match(/ember-power-select-trigger-ember(\\d+)/)[1];\n      var isMultipleSelect = _ember['default'].$(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var dropdownIsClosed = _ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0;\n      if (dropdownIsClosed) {\n        nativeMouseDown(cssPath + ' .ember-power-select-trigger');\n        wait();\n      }\n      var isDefaultSingleSelect = _ember['default'].$('.ember-power-select-search input').length > 0;\n\n      if (isMultipleSelect) {\n        fillIn(cssPath + ' .ember-power-select-trigger-multiple-input', value);\n        if (isEmberOne) {\n          triggerEvent(cssPath + ' .ember-power-select-trigger-multiple-input', 'input');\n        }\n      } else if (isDefaultSingleSelect) {\n        fillIn('.ember-power-select-search input', value);\n        if (isEmberOne) {\n          triggerEvent('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search input', 'input');\n        }\n      } else {\n        // It's probably a customized version\n        var inputIsInTrigger = !!find(cssPath + ' .ember-power-select-trigger input[type=search]')[0];\n        if (inputIsInTrigger) {\n          fillIn(cssPath + ' .ember-power-select-trigger input[type=search]', value);\n          if (isEmberOne) {\n            triggerEvent(cssPath + ' .ember-power-select-trigger input[type=search]', 'input');\n          }\n        } else {\n          if (isEmberOne) {\n            triggerEvent('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search input[type=search]', 'input');\n          }\n        }\n      }\n    });\n\n    _ember['default'].Test.registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn')[0];\n      try {\n        nativeMouseDown(elem);\n      } catch (e) {\n        console.warn('css path to remove btn not found');\n        throw e;\n      }\n    });\n\n    _ember['default'].Test.registerAsyncHelper('clearSelected', function (app, cssPath) {\n      var elem = find(cssPath + ' .ember-power-select-clear-btn')[0];\n      try {\n        nativeMouseDown(elem);\n      } catch (e) {\n        console.warn('css path to clear btn not found');\n        throw e;\n      }\n    });\n  };\n});","define('mock-kodr/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('mock-kodr/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'mock-kodr/tests/helpers/start-app', 'mock-kodr/tests/helpers/destroy-app'], function (exports, _qunit, _mockKodrTestsHelpersStartApp, _mockKodrTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _mockKodrTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _mockKodrTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('mock-kodr/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/helpers/resolver', ['exports', 'mock-kodr/resolver', 'mock-kodr/config/environment'], function (exports, _mockKodrResolver, _mockKodrConfigEnvironment) {\n\n  var resolver = _mockKodrResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _mockKodrConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _mockKodrConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('mock-kodr/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/helpers/start-app', ['exports', 'ember', 'mock-kodr/app', 'mock-kodr/config/environment'], function (exports, _ember, _mockKodrApp, _mockKodrConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _mockKodrConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _mockKodrApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('mock-kodr/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/arena-create-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('arena-create', 'Integration | Component | arena create', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'arena-create', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'arena-create', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/arena-create-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/arena-create-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/arena-create-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/arena-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('arena-item', 'Integration | Component | arena item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'arena-item', ['loc', [null, [1, 0], [1, 14]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'arena-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 19]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/arena-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/arena-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/arena-item-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/arena-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('arena-list', 'Integration | Component | arena list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'arena-list', ['loc', [null, [1, 0], [1, 14]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'arena-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 19]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/arena-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/arena-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/arena-list-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-create-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('challenge-create', 'Integration | Component | challenge create', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'challenge-create', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'challenge-create', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-create-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/challenge-create-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/challenge-create-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('challenge-edit', 'Integration | Component | challenge edit', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'challenge-edit', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'challenge-edit', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/challenge-edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/challenge-edit-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('challenge-item', 'Integration | Component | challenge item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'challenge-item', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'challenge-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/challenge-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/challenge-item-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('challenge-list', 'Integration | Component | challenge list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'challenge-list', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'challenge-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/challenge-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/challenge-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/challenge-list-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/concept-create-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('concept-create', 'Integration | Component | concept create', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'concept-create', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'concept-create', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/concept-create-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/concept-create-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/concept-create-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/login-page-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('login-page', 'Integration | Component | login page', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'login-page', ['loc', [null, [1, 0], [1, 14]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'login-page', [], [], 0, null, ['loc', [null, [2, 4], [4, 19]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/login-page-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/login-page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/login-page-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/user-arena-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-arena-item', 'Integration | Component | user arena item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'user-arena-item', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'user-arena-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/user-arena-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/user-arena-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-arena-item-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/integration/components/user-arena-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-arena-list', 'Integration | Component | user arena list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'user-arena-list', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'user-arena-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mock-kodr/tests/integration/components/user-arena-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/user-arena-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-arena-list-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/models/activity.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/activity.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/activity.js should pass jshint.\\nmodels/activity.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/activity.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/activity.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/activity.js: line 15, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('mock-kodr/tests/models/arena.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/arena.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/arena.js should pass jshint.\\nmodels/arena.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/arena.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/arena.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/arena.js: line 19, col 41, Missing semicolon.\\nmodels/arena.js: line 49, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n5 errors');\n  });\n});","define('mock-kodr/tests/models/challenge.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/challenge.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/challenge.js should pass jshint.\\nmodels/challenge.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/challenge.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/challenge.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/models/concept.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/concept.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/concept.js should pass jshint.\\nmodels/concept.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/concept.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/concept.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/models/mixed.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/mixed.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/mixed.js should pass jshint.\\nmodels/mixed.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/mixed.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/mixed.js: line 12, col 8, Missing property name.\\nmodels/mixed.js: line 21, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nmodels/mixed.js: line 25, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n5 errors');\n  });\n});","define('mock-kodr/tests/models/trial.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/trial.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/trial.js should pass jshint.\\nmodels/trial.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/trial.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/trial.js: line 26, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/models/user-arena.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/user-arena.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/user-arena.js should pass jshint.\\nmodels/user-arena.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user-arena.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user-arena.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user-arena.js: line 14, col 85, Missing semicolon.\\nmodels/user-arena.js: line 15, col 36, Missing semicolon.\\nmodels/user-arena.js: line 20, col 30, Missing semicolon.\\n\\n6 errors');\n  });\n});","define('mock-kodr/tests/models/user-concept.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/user-concept.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/user-concept.js should pass jshint.\\nmodels/user-concept.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user-concept.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user-concept.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/models/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/user.js should pass jshint.\\nmodels/user.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user.js: line 23, col 76, Missing semicolon.\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 54, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('mock-kodr/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass jshint.\\nroutes/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/routes/arena.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/arena.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/arena.js should pass jshint.\\nroutes/arena.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/arena.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/arena.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/arena.js: line 4, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/arena.js: line 8, col 11, Missing semicolon.\\n\\n5 errors');\n  });\n});","define('mock-kodr/tests/routes/arenas.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/arenas.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/arenas.js should pass jshint.\\nroutes/arenas.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/arenas.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/arenas.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/arenas.js: line 4, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('mock-kodr/tests/routes/charts.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/charts.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/charts.js should pass jshint.\\nroutes/charts.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/charts.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/routes/concepts.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/concepts.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/concepts.js should pass jshint.\\nroutes/concepts.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/concepts.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/concepts.js: line 4, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/routes/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass jshint.\\nroutes/login.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/login.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/routes/user-arena.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/user-arena.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/user-arena.js should pass jshint.\\nroutes/user-arena.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/user-arena.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/user-arena.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/user-arena.js: line 17, col 15, Missing semicolon.\\nroutes/user-arena.js: line 18, col 29, Missing semicolon.\\n\\n5 errors');\n  });\n});","define('mock-kodr/tests/routes/user-arenas.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/user-arenas.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/user-arenas.js should pass jshint.\\nroutes/user-arenas.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/user-arenas.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/user-arenas.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/user-arenas.js: line 4, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('mock-kodr/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/application.js should pass jshint.\\nserializers/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/application.js: line 7, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('mock-kodr/tests/sessions/custom.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - sessions/custom.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'sessions/custom.js should pass jshint.\\nsessions/custom.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nsessions/custom.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nsessions/custom.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nsessions/custom.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('mock-kodr/tests/storages/current-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - storages/current-user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'storages/current-user.js should pass jshint.\\nstorages/current-user.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstorages/current-user.js: line 3, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nstorages/current-user.js: line 12, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('mock-kodr/tests/test-helper', ['exports', 'mock-kodr/tests/helpers/resolver', 'ember-qunit'], function (exports, _mockKodrTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_mockKodrTestsHelpersResolver['default']);\n});","define('mock-kodr/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('mock-kodr/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mock-kodr/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/controllers/arena-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:arena', 'Unit | Controller | arena', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mock-kodr/tests/unit/controllers/arena-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/arena-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/arena-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/controllers/arenas-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:arenas', 'Unit | Controller | arenas', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mock-kodr/tests/unit/controllers/arenas-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/arenas-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/arenas-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/controllers/charts-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:charts', 'Unit | Controller | charts', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mock-kodr/tests/unit/controllers/charts-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/charts-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/charts-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/models/activity-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('activity', 'Unit | Model | activity', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mock-kodr/tests/unit/models/activity-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/activity-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/activity-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/models/arena-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('arena', 'Unit | Model | arena', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mock-kodr/tests/unit/models/arena-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/arena-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/arena-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/models/concept-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('concept', 'Unit | Model | concept', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mock-kodr/tests/unit/models/concept-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/concept-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/concept-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/models/trial-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('trial', 'Unit | Model | trial', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mock-kodr/tests/unit/models/trial-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/trial-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/trial-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/models/user-arena-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user-arena', 'Unit | Model | user arena', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mock-kodr/tests/unit/models/user-arena-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/user-arena-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-arena-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/models/user-concept-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user-concept', 'Unit | Model | user concept', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mock-kodr/tests/unit/models/user-concept-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/user-concept-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-concept-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mock-kodr/tests/unit/models/user-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/arena-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:arena', 'Unit | Route | arena', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/arena-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/arena-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/arena-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/arenas-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:arenas', 'Unit | Route | arenas', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/arenas-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/arenas-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/arenas-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/charts-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:charts', 'Unit | Route | charts', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/charts-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/charts-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/charts-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/concepts-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:concepts', 'Unit | Route | concepts', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/concepts-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/concepts-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/concepts-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/user-arena-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:user-arena', 'Unit | Route | user arena', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/user-arena-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/user-arena-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/user-arena-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/routes/user-arenas-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:user-arenas', 'Unit | Route | user arenas', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mock-kodr/tests/unit/routes/user-arenas-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/user-arenas-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/user-arenas-test.js should pass jshint.');\n  });\n});","define('mock-kodr/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('mock-kodr/tests/unit/serializers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('mock-kodr/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingszCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}